@misc{RN14,
   title = {FMPy},
   author = {Sommer, Torsten},
   url = {https://github.com/CATIA-Systems/FMPy},
   year = {2020}
}

@article{RN24,
   author = {Daun, S. and Rubin, J. and Vodovotz, Y. and Clermont, G.},
   title = {Equation-based models of dynamic biological systems},
   journal = {J Crit Care},
   volume = {23},
   number = {4},
   pages = {585-94},
   abstract = {The purpose of this review is to introduce differential equations as a simulation tool in the biological and clinical sciences. This modeling technique is very mature and has been a preferred tool of physiologists and bioengineers and of quantitative scientists in general to describe and predict the behavior of complex interacting systems. However, this methodology has not been widely used within clinical medicine due to a lack of familiarity with highly quantitative methods and a greater acquaintance with statistical modeling approaches based on inference and empirical data analysis. We will describe various aspects of equation-based modeling, including underlying assumptions, strengths, and weaknesses and provide specific examples of simple models. We conclude that the usefulness of quantitative modeling, including equation-based models, is ultimately linked to the quality and abundance of observation obtained on the system being modeled. Equation-based modeling, although potentially an integrative approach, is complementary to and extends the potential of traditional statistically based approaches to inference.},
   ISSN = {0883-9441 (Print)
            0883-9441},
   DOI = {10.1016/j.jcrc.2008.02.003},
   year = {2008}
}

@article{RN35,
   author = { Nikolić, DD.},
   title = {DAE Tools: equation-based object-oriented modelling, simulation and optimisation software.},
   journal = {PeerJ Computer Science},
   volume = {2},
   number = {e54},
   DOI = {doi.org/10.7717/peerj-cs.54},
   year = {2016}
}

@article{RN29,
   author = {Fischer, H. P.},
   title = {Mathematical modeling of complex biological systems: from parts lists to understanding systems behavior},
   journal = {Alcohol Res Health},
   volume = {31},
   number = {1},
   pages = {49-59},
   abstract = {To understand complex biological systems such as cells, tissues, or even the human body, it is not sufficient to identify and characterize the individual molecules in the system. It also is necessary to obtain a thorough understanding of the interaction between molecules and pathways. This is even truer for understanding complex diseases such as cancer, Alzheimer's disease, or alcoholism. With recent technological advances enabling researchers to monitor complex cellular processes on the molecular level, the focus is shifting toward interpreting the data generated by these so-called "-omics" technologies. Mathematical models allow researchers to investigate how complex regulatory processes are connected and how disruptions of these processes may contribute to the development of disease. In addition, computational models help investigators to systematically analyze systems perturbations, develop hypotheses to guide the design of new experimental tests, and ultimately assess the suitability of specific molecules as novel therapeutic targets. Numerous mathematical methods have been developed to address different categories of biological processes, such as metabolic processes or signaling and regulatory pathways. Today, modeling approaches are essential for biologists, enabling them to analyze complex physiological processes, as well as for the pharmaceutical industry, as a means for supporting drug discovery and development programs.},
   ISSN = {1535-7414 (Print)
            1535-7414},
   year = {2008}
}

@article{RN22,
   author = {Fritzson, P. and Pop, A. and Abdelhak, K. and Ashgar, A. and Bachmann, B. and Braun, W. and Bouskela, D. and Braun, R. and Buffoni, L. and Casella, F. and Castro, R. and Franke, R. and Fritzson, D. and Gebremedhin, M. and Heuermann, A. and Lie, B. and Mengist, A. and Mikelsons, L. and Moudgalya, K. and Ochel, L. and Palanisamy, A. and Ruge, V. and Schamai, W. and Sjölund, M. and Thiele, B. and Tinnerholm, J. and Östlund, P.},
   title = {The OpenModelica Integrated Environment for Modeling, Simulation, and Model-Based Development},
   journal = {Modeling Identification and Control},
   volume = {41},
   number = {4},
   pages = {241-285},
   abstract = {OpenModelica is a unique large-scale integrated open-source Modelica- and FMI-based modeling, simulation, optimization, model-based analysis and development environment. Moreover, the OpenModelica environment provides a number of facilities such as debugging; optimization; visualization and 3D animation; web-based model editing and simulation; scripting from Modelica, Python, Julia, and Matlab; efficient simulation and co-simulation of FMI-based models; compilation for embedded systems; Modelica-UML integration; requirement verification; and generation of parallel code for multi-core architectures. The environment is based on the equation-based object-oriented Modelica language and currently uses the MetaModelica extended version of Modelica for its model compiler implementation. This overview paper gives an up-to-date description of the capabilities of the system, short overviews of used open source symbolic and numeric algorithms with pointers to published literature, tool integration aspects, some lessons learned, and the main vision behind its development.},
   ISSN = {0332-7353},
   DOI = {10.4173/mic.2020.4.1},
   url = {<Go to ISI>://WOS:000605964400001},
   year = {2020}
}

@article{RN32,
   author = {Fröhlich, Fabian and Weindl, Daniel and Schälte, Yannik and Pathirana, Dilan and Paszkowski, Łukasz and Lines, Glenn Terje and Stapor, Paul and Hasenauer, Jan},
   title = {AMICI: high-performance sensitivity analysis for large ordinary differential equation models},
   journal = {Bioinformatics},
   volume = {37},
   number = {20},
   pages = {3676-3677},
   abstract = {Ordinary differential equation models facilitate the understanding of cellular signal transduction and other biological processes. However, for large and comprehensive models, the computational cost of simulating or calibrating can be limiting. AMICI is a modular toolbox implemented in C++/Python/MATLAB that provides efficient simulation and sensitivity analysis routines tailored for scalable, gradient-based parameter estimation and uncertainty quantification.AMICI is published under the permissive BSD-3-Clause license with source code publicly available on https://github.com/AMICI-dev/AMICI. Citeable releases are archived on Zenodo.Supplementary data are available at Bioinformatics online.},
   ISSN = {1367-4803},
   DOI = {10.1093/bioinformatics/btab227},
   url = {https://doi.org/10.1093/bioinformatics/btab227},
   year = {2021}
}

@article{RN28,
   author = {Hartmann, Fabian S. F. and Udugama, Isuru A. and Seibold, Gerd M. and Sugiyama, Hirokazu and Gernaey, Krist V.},
   title = {Digital models in biotechnology: Towards multi-scale integration and implementation},
   journal = {Biotechnology Advances},
   volume = {60},
   pages = {108015},
   abstract = {Industrial biotechnology encompasses a large area of multi-scale and multi-disciplinary research activities. With the recent megatrend of digitalization sweeping across all industries, there is an increased focus in the biotechnology industry on developing, integrating and applying digital models to improve all aspects of industrial biotechnology. Given the rapid development of this field, we systematically classify the state-of-art modelling concepts applied at different scales in industrial biotechnology and critically discuss their current usage, advantages and limitations. Further, we critically analyzed current strategies to couple cell models with computational fluid dynamics to study the performance of industrial microorganisms in large-scale bioprocesses, which is of crucial importance for the bio-based production industries. One of the most challenging aspects in this context is gathering intracellular data under industrially relevant conditions. Towards comprehensive models, we discuss how different scale-down concepts combined with appropriate analytical tools can capture intracellular states of single cells. We finally illustrated how the efforts could be used to develop digitals models suitable for both cell factory design and process optimization at industrial scales in the future.},
   ISSN = {0734-9750},
   DOI = {10.1016/j.biotechadv.2022.108015},
   url = {https://www.sciencedirect.com/science/article/pii/S0734975022001112},
   year = {2022}
}

@article{RN30,
   author = {Hemmerich, Johannes and Tenhaef, Niklas and Wiechert, Wolfgang and Noack, Stephan},
   title = {pyFOOMB: Python framework for object oriented modeling of bioprocesses},
   journal = {Engineering in Life Sciences},
   volume = {21},
   number = {3-4},
   pages = {242-257},
   abstract = {Abstract Quantitative characterization of biotechnological production processes requires the determination of different key performance indicators (KPIs) such as titer, rate and yield. Classically, these KPIs can be derived by combining black-box bioprocess modeling with non-linear regression for model parameter estimation. The presented pyFOOMB package enables a guided and flexible implementation of bioprocess models in the form of ordinary differential equation systems (ODEs). By building on Python as powerful and multi-purpose programing language, ODEs can be formulated in an object-oriented manner, which facilitates their modular design, reusability, and extensibility. Once the model is implemented, seamless integration and analysis of the experimental data is supported by various Python packages that are already available. In particular, for the iterative workflow of experimental data generation and subsequent model parameter estimation we employed the concept of replicate model instances, which are linked by common sets of parameters with global or local properties. For the description of multi-stage processes, discontinuities in the right-hand sides of the differential equations are supported via event handling using the freely available assimulo package. Optimization problems can be solved by making use of a parallelized version of the generalized island approach provided by the pygmo package. Furthermore, pyFOOMB in combination with Jupyter notebooks also supports education in bioprocess engineering and the applied learning of Python as scientific programing language. Finally, the applicability and strengths of pyFOOMB will be demonstrated by a comprehensive collection of notebook examples.},
   ISSN = {1618-0240},
   DOI = {10.1002/elsc.202000088},
   url = {https://doi.org/10.1002/elsc.202000088},
   year = {2021}
}

@article{RN33,
   author = {Hoops, Stefan and Sahle, Sven and Gauges, Ralph and Lee, Christine and Pahle, Jürgen and Simus, Natalia and Singhal, Mudita and Xu, Liang and Mendes, Pedro and Kummer, Ursula},
   title = {COPASI—a COmplex PAthway SImulator},
   journal = {Bioinformatics},
   volume = {22},
   number = {24},
   pages = {3067-3074},
   abstract = {Motivation: Simulation and modeling is becoming a standard approach to understand complex biochemical processes. Therefore, there is a big need for software tools that allow access to diverse simulation and modeling methods as well as support for the usage of these methods.Results: Here, we present COPASI, a platform-independent and user-friendly biochemical simulator that offers several unique features. We discuss numerical issues with these features; in particular, the criteria to switch between stochastic and deterministic simulation methods, hybrid deterministic–stochastic methods, and the importance of random number generator numerical resolution in stochastic simulation.Availability: The complete software is available in binary (executable) for MS Windows, OS X, Linux (Intel) and Sun Solaris (SPARC), as well as the full source code under an open source license from .Contact:  mendes@vbi.vt.edu},
   ISSN = {1367-4803},
   DOI = {10.1093/bioinformatics/btl485},
   url = {https://doi.org/10.1093/bioinformatics/btl485},
   year = {2006}
}

@article{RN21,
   author = {Izzo, Francesco Biscani and Dario},
   title = {A parallel global multiobjective framework for optimization: pagmo},
   journal = {Journal of Open Source Software},
   volume = {5},
   pages = {2338},
   DOI = {10.21105/joss.02338},
   url = {https://doi.org/10.21105/joss.02338},
   year = {2020}
}

@article{RN36,
   author = {K. Arendt, M. Jradi, M. Wetter, C.T. Veje},
   title = {ModestPy: An Open-Source Python Tool for Parameter Estimation in Functional Mock-up Units},
   journal = {Proceedings of the American Modelica Conference 2018, Cambridge, MA, USA, October 9-10},
   year = {2018}
}

@article{RN11,
   author = {Maggioli, F and Mancini, T and Tronci, E},
   title = {SBML2Modelica: integrating biochemical models within open-standard simulation ecosystems},
   journal = {Bioinformatics},
   volume = {36},
   number = {7},
   pages = {2165-2172},
   abstract = {SBML is the most widespread language for the definition of biochemical models. Although dozens of SBML simulators are available, there is a general lack of support to the integration of SBML models within open-standard general-purpose simulation ecosystems. This hinders co-simulation and integration of SBML models within larger model networks, in order to, e.g. enable in silico clinical trials of drugs, pharmacological protocols, or engineering artefacts such as biomedical devices against Virtual Physiological Human models. Modelica is one of the most popular existing open-standard general-purpose simulation languages, supported by many simulators. Modelica models are especially suited for the definition of complex networks of heterogeneous models from virtually all application domains. Models written in Modelica (and in 100+ other languages) can be readily exported into black-box Functional Mock-Up Units (FMUs), and seamlessly co-simulated and integrated into larger model networks within open-standard language-independent simulation ecosystems.In order to enable SBML model integration within heterogeneous model networks, we present SBML2Modelica, a software system translating SBML models into well-structured, user-intelligible, easily modifiable Modelica models. SBML2Modelica is SBML Level 3 Version 2—compliant and succeeds on 96.47% of the SBML Test Suite Core (with a few rare, intricate and easily avoidable combinations of constructs unsupported and cleanly signalled to the user). Our experimental campaign on 613 models from the BioModels database (with up to 5438 variables) shows that the major open-source (general-purpose) Modelica and FMU simulators achieve performance comparable to state-of-the-art specialized SBML simulators.SBML2Modelica is written in Java and is freely available for non-commercial use at https://bitbucket.org/mclab/sbml2modelica.},
   ISSN = {1367-4803},
   DOI = {10.1093/bioinformatics/btz860},
   url = {https://doi.org/10.1093/bioinformatics/btz860},
   year = {2019}
}

@article{RN34,
   author = {Mitra, Eshan D. and Suderman, Ryan and Colvin, Joshua and Ionkov, Alexander and Hu, Andrew and Sauro, Herbert M. and Posner, Richard G. and Hlavacek, William S.},
   title = {PyBioNetFit and the Biological Property Specification Language},
   journal = {iScience},
   volume = {19},
   pages = {1012-1036},
   abstract = {Summary In systems biology modeling, important steps include model parameterization, uncertainty quantification, and evaluation of agreement with experimental observations. To help modelers perform these steps, we developed the software PyBioNetFit, which in addition supports checking models against known system properties and solving design problems. PyBioNetFit introduces Biological Property Specification Language (BPSL) for the formal declaration of system properties. BPSL allows qualitative data to be used alone or in combination with quantitative data. PyBioNetFit performs parameterization with parallelized metaheuristic optimization algorithms that work directly with existing model definition standards: BioNetGen Language (BNGL) and Systems Biology Markup Language (SBML). We demonstrate PyBioNetFit's capabilities by solving various example problems, including the challenging problem of parameterizing a 153-parameter model of cell cycle control in yeast based on both quantitative and qualitative data. We demonstrate the model checking and design applications of PyBioNetFit and BPSL by analyzing a model of targeted drug interventions in autophagy signaling.},
   ISSN = {2589-0042},
   DOI = {10.1016/j.isci.2019.08.045},
   url = {https://www.sciencedirect.com/science/article/pii/S2589004219303232},
   year = {2019}
}

@article{RN27,
   author = {Noll, Philipp and Henkel, Marius},
   title = {History and Evolution of Modeling in Biotechnology: Modeling & Simulation, Application and Hardware Performance},
   journal = {Computational and Structural Biotechnology Journal},
   volume = {18},
   pages = {3309-3323},
   abstract = {Biological systems are typically composed of highly interconnected subunits and possess an inherent complexity that make monitoring, control and optimization of a bioprocess a challenging task. Today a toolset of modeling techniques can provide guidance in understanding complexity and in meeting those challenges. Over the last four decades, computational performance increased exponentially. This increase in hardware capacity allowed ever more detailed and computationally intensive models approaching a “one-to-one” representation of the biological reality. Fueled by governmental guidelines like the PAT initiative of the FDA, novel soft sensors and techniques were developed in the past to ensure product quality and provide data in real time. The estimation of current process state and prediction of future process course eventually enabled dynamic process control. In this review, past, present and envisioned future of models in biotechnology are compared and discussed with regard to application in process monitoring, control and optimization. In addition, hardware requirements and availability to fit the needs of increasingly more complex models are summarized. The major techniques and diverse approaches of modeling in industrial biotechnology are compared, and current as well as future trends and perspectives are outlined.},
   ISSN = {2001-0370},
   DOI = {10.1016/j.csbj.2020.10.018},
   url = {https://www.sciencedirect.com/science/article/pii/S2001037020304402},
   year = {2020}
}

@misc{RN23,
   author = {Ostehege, Michael},
   title = {pytensor-federated},
   url = {https://github.com/michaelosthege/pytensor-federated},
   year = {2023}
}

@article{RN26,
   author = {Ploch, Tobias and Lieres, Eric von and Wiechert, Wolfgang and Mitsos, Alexander and Hannemann-Tamás, Ralf},
   title = {Simulation of differential-algebraic equation systems with optimization criteria embedded in Modelica},
   journal = {Computers & Chemical Engineering},
   volume = {140},
   pages = {106920},
   abstract = {Differential-algebraic equations with embedded optimization criteria (DAEO) are a class of mathematical models for underdetermined differential-algebraic equation (DAE) systems with less algebraic equations than algebraic variables. The algebraic variables may be calculated as the solution of an embedded (non)linear program, yielding a DAEO system. An example for DAEOs is the dynamic flux balance analysis (DFBA) approach, where the formulation of metabolic reaction networks leads to an underdetermined equation system for the intracellular fluxes that are assumed to behave optimally with respect to some cell-specific optimization criterion. We present a toolbox that allows formulation of DAEOs in the object-oriented Modelica modeling language. The solution method is based on substituting the embedded optimization problem with its first-order Karush-Kuhn-Tucker conditions to obtain a nonsmooth DAE system that can be simulated by a root-finding DAE solver. One nonlinear example and two examples based on DFBA demonstrate the performance of the toolbox.},
   ISSN = {0098-1354},
   DOI = {doi.org/10.1016/j.compchemeng.2020.106920},
   url = {https://www.sciencedirect.com/science/article/pii/S0098135419313195},
   year = {2020}
}

@article{RN31,
   author = {Raue, A. and Steiert, B. and Schelker, M. and Kreutz, C. and Maiwald, T. and Hass, H. and Vanlier, J. and Tönsing, C. and Adlung, L. and Engesser, R. and Mader, W. and Heinemann, T. and Hasenauer, J. and Schilling, M. and Höfer, T. and Klipp, E. and Theis, F. and Klingmüller, U. and Schöberl, B. and Timmer, J.},
   title = {Data2Dynamics: a modeling environment tailored to parameter estimation in dynamical systems},
   journal = {Bioinformatics},
   volume = {31},
   number = {21},
   pages = {3558-3560},
   abstract = {Summary: Modeling of dynamical systems using ordinary differential equations is a popular approach in the field of systems biology. Two of the most critical steps in this approach are to construct dynamical models of biochemical reaction networks for large datasets and complex experimental conditions and to perform efficient and reliable parameter estimation for model fitting. We present a modeling environment for MATLAB that pioneers these challenges. The numerically expensive parts of the calculations such as the solving of the differential equations and of the associated sensitivity system are parallelized and automatically compiled into efficient C code. A variety of parameter estimation algorithms as well as frequentist and Bayesian methods for uncertainty analysis have been implemented and used on a range of applications that lead to publications.Availability and implementation: The Data2Dynamics modeling environment is MATLAB based, open source and freely available at http://www.data2dynamics.org.Contact:  andreas.raue@fdm.uni-freiburg.deSupplementary information:  Supplementary data are available at Bioinformatics online.},
   ISSN = {1367-4803},
   DOI = {10.1093/bioinformatics/btv405},
   url = {https://doi.org/10.1093/bioinformatics/btv405},
   year = {2015}
}

@article{RN15,
   author = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and Haberland, Matt and Reddy, Tyler and Cournapeau, David and Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and Bright, Jonathan and van der Walt, Stéfan J. and Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and Kern, Robert and Larson, Eric and Carey, C. J. and Polat, İlhan and Feng, Yu and Moore, Eric W. and VanderPlas, Jake and Laxalde, Denis and Perktold, Josef and Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and Harris, Charles R. and Archibald, Anne M. and Ribeiro, Antônio H. and Pedregosa, Fabian and van Mulbregt, Paul and Vijaykumar, Aditya and Bardelli, Alessandro Pietro and Rothberg, Alex and Hilboll, Andreas and Kloeckner, Andreas and Scopatz, Anthony and Lee, Antony and Rokem, Ariel and Woods, C. Nathan and Fulton, Chad and Masson, Charles and Häggström, Christian and Fitzgerald, Clark and Nicholson, David A. and Hagen, David R. and Pasechnik, Dmitrii V. and Olivetti, Emanuele and Martin, Eric and Wieser, Eric and Silva, Fabrice and Lenders, Felix and Wilhelm, Florian and Young, G. and Price, Gavin A. and Ingold, Gert-Ludwig and Allen, Gregory E. and Lee, Gregory R. and Audren, Hervé and Probst, Irvin and Dietrich, Jörg P. and Silterra, Jacob and Webber, James T. and Slavič, Janko and Nothman, Joel and Buchner, Johannes and Kulick, Johannes and Schönberger, Johannes L. and de Miranda Cardoso, José Vinícius and Reimer, Joscha and Harrington, Joseph and Rodríguez, Juan Luis Cano and Nunez-Iglesias, Juan and Kuczynski, Justin and Tritz, Kevin and Thoma, Martin and Newville, Matthew and Kümmerer, Matthias and Bolingbroke, Maximilian and Tartre, Michael and Pak, Mikhail and Smith, Nathaniel J. and Nowaczyk, Nikolai and Shebanov, Nikolay and Pavlyk, Oleksandr and Brodtkorb, Per A. and Lee, Perry and McGibbon, Robert T. and Feldbauer, Roman and Lewis, Sam and Tygier, Sam and Sievert, Scott and Vigna, Sebastiano and Peterson, Stefan and More, Surhud and Pudlik, Tadeusz and Oshima, Takuya and others },
   title = {SciPy 1.0: fundamental algorithms for scientific computing in Python},
   journal = {Nature Methods},
   volume = {17},
   number = {3},
   pages = {261-272},
   abstract = {SciPy is an open-source scientific computing library for the Python programming language. Since its initial release in 2001, SciPy has become a de facto standard for leveraging scientific algorithms in Python, with over 600 unique code contributors, thousands of dependent packages, over 100,000 dependent repositories and millions of downloads per year. In this work, we provide an overview of the capabilities and development practices of SciPy 1.0 and highlight some recent technical developments.},
   ISSN = {1548-7105},
   DOI = {10.1038/s41592-019-0686-2},
   url = {https://doi.org/10.1038/s41592-019-0686-2},
   year = {2020}
}


@article{RN37,
   author = {Casler, Michael D. and Vermerris, Wilfred and Dixon, Richard A.},
   title = {Replication Concepts for Bioenergy Research Experiments},
   journal = {BioEnergy Research},
   volume = {8},
   number = {1},
   pages = {1-16},
   abstract = {While there are some large and fundamental differences among disciplines related to the conversion of biomass to bioenergy, all scientific endeavors involve the use of biological feedstocks. As such, nearly every scientific experiment conducted in this area, regardless of the specific discipline, is subject to random variation, some of which is unpredictable and unidentifiable (i.e., pure random variation such as variation among plots in an experiment, individuals within a plot, or laboratory samples within an experimental unit) while some is predictable and identifiable (repeatable variation, such as spatial or temporal patterns within an experimental field, a glasshouse or growth chamber, or among laboratory containers). Identifying the scale and sources of this variation relative to the specific hypotheses of interest is a critical component of designing good experiments that generate meaningful and believable hypothesis tests and inference statements. Many bioenergy feedstock experiments are replicated at an incorrect scale, typically by sampling feedstocks to estimate laboratory error or by completely ignoring the errors associated with growing feedstocks in an agricultural area at a field or farmland (micro- or macro-region) scale. As such, actual random errors inherent in experimental materials are frequently underestimated, with unrealistically low standard errors of statistical parameters (e.g., means), leading to improper inferences. The examples and guidelines set forth in this paper and many of the references cited are intended to form the general policy and guidelines for replication of bioenergy feedstock experiments to be published in BioEnergy Research.},
   ISSN = {1939-1242},
   DOI = {10.1007/s12155-015-9580-7},
   url = {https://doi.org/10.1007/s12155-015-9580-7},
   year = {2015},
   type = {Journal Article}
}


@article{RN40,
   author = {Hucka, M. and Finney, A. and Sauro, H. M. and Bolouri, H. and Doyle, J. C. and Kitano, H. and Arkin, A. P. and Bornstein, B. J. and Bray, D. and Cornish-Bowden, A. and Cuellar, A. A. and Dronov, S. and Gilles, E. D. and Ginkel, M. and Gor, V. and Goryanin, I. I. and Hedley, W. J. and Hodgman, T. C. and Hofmeyr, J. H. and Hunter, P. J. and Juty, N. S. and Kasberger, J. L. and Kremling, A. and Kummer, U. and Le Novère, N. and Loew, L. M. and Lucio, D. and Mendes, P. and Minch, E. and Mjolsness, E. D. and Nakayama, Y. and Nelson, M. R. and Nielsen, P. F. and Sakurada, T. and Schaff, J. C. and Shapiro, B. E. and Shimizu, T. S. and Spence, H. D. and Stelling, J. and Takahashi, K. and Tomita, M. and Wagner, J. and Wang, J. and and the rest of the, Sbml Forum},
   title = {The systems biology markup language (SBML): a medium for representation and exchange of biochemical network models},
   journal = {Bioinformatics},
   volume = {19},
   number = {4},
   pages = {524-531},
   abstract = {Motivation: Molecular biotechnology now makes it possible to build elaborate systems models, but the systems biology community needs information standards if models are to be shared, evaluated and developed cooperatively.Results: We summarize the Systems Biology Markup Language (SBML) Level 1, a free, open, XML-based format for representing biochemical reaction networks. SBML is a software-independent language for describing models common to research in many areas of computational biology, including cell signaling pathways, metabolic pathways, gene regulation, and others.Availability: The specification of SBML Level 1 is freely available from http://www.sbml.org/Contact: sysbio-team@caltech.edu*To whom correspondence should be addressed.},
   ISSN = {1367-4803},
   DOI = {10.1093/bioinformatics/btg015},
   url = {https://doi.org/10.1093/bioinformatics/btg015},
   year = {2003},
   type = {Journal Article}
}


@article{RN11,
   author = {Maggioli, F and Mancini, T and Tronci, E},
   title = {SBML2Modelica: integrating biochemical models within open-standard simulation ecosystems},
   journal = {Bioinformatics},
   volume = {36},
   number = {7},
   pages = {2165-2172},
   abstract = {SBML is the most widespread language for the definition of biochemical models. Although dozens of SBML simulators are available, there is a general lack of support to the integration of SBML models within open-standard general-purpose simulation ecosystems. This hinders co-simulation and integration of SBML models within larger model networks, in order to, e.g. enable in silico clinical trials of drugs, pharmacological protocols, or engineering artefacts such as biomedical devices against Virtual Physiological Human models. Modelica is one of the most popular existing open-standard general-purpose simulation languages, supported by many simulators. Modelica models are especially suited for the definition of complex networks of heterogeneous models from virtually all application domains. Models written in Modelica (and in 100+ other languages) can be readily exported into black-box Functional Mock-Up Units (FMUs), and seamlessly co-simulated and integrated into larger model networks within open-standard language-independent simulation ecosystems.In order to enable SBML model integration within heterogeneous model networks, we present SBML2Modelica, a software system translating SBML models into well-structured, user-intelligible, easily modifiable Modelica models. SBML2Modelica is SBML Level 3 Version 2—compliant and succeeds on 96.47% of the SBML Test Suite Core (with a few rare, intricate and easily avoidable combinations of constructs unsupported and cleanly signalled to the user). Our experimental campaign on 613 models from the BioModels database (with up to 5438 variables) shows that the major open-source (general-purpose) Modelica and FMU simulators achieve performance comparable to state-of-the-art specialized SBML simulators.SBML2Modelica is written in Java and is freely available for non-commercial use at https://bitbucket.org/mclab/sbml2modelica.},
   ISSN = {1367-4803},
   DOI = {10.1093/bioinformatics/btz860},
   url = {https://doi.org/10.1093/bioinformatics/btz860},
   year = {2019},
   type = {Journal Article}
}

@misc{RN42,
   author = {{Modelica Association}},
   title = {Functional Mock-up Interface (FMI)},
   url = {https://fmi-standard.org/},
   type = {Web Page},
   year = {2023}
}
@misc{RN46,
   author = {{Modelica Association}},
   title = {FMI 3.0 What's New},
   url = {https://fmi-standard.org/docs/3.0/#fmi-whats-new},
   type = {Web Page},
   year = {2022}
}
}

@article{calibr8Paper,
  doi       = {10.1371/journal.pcbi.1009223},
  author    = {Helleckes{\textsuperscript{1}}, Laura Marie and
               Osthege{\textsuperscript{1}}, Michael and
               Wiechert, Wolfgang and
               {von Lieres}, Eric and
               Oldiges, Marco},
  journal   = {PLOS Computational Biology},
  publisher = {Public Library of Science},
  title     = {Bayesian and calibration, process modeling and uncertainty quantification in biotechnology},
  year      = {2022},
  month     = {03},
  volume    = {18},
  url       = {https://doi.org/10.1371/journal.pcbi.1009223},
  pages     = {1-46},
  number    = {3}
}

@software{RN47,
  author       = {Osthege, Michael and Helleckes, Laura},
  title        = {JuBiotech/murefi: v5.1.0},
  month        = feb,
  year         = 2022,
  publisher    = {Zenodo},
  version      = {v5.1.0},
  doi          = {10.5281/zenodo.6006488},
  url          = {https://doi.org/10.5281/zenodo.6006488}
}

@article{RN43,
    author = {Villaverde, Alejandro F and Fröhlich, Fabian and Weindl, Daniel and Hasenauer, Jan and Banga, Julio R},
    title = {Benchmarking optimization methods for parameter estimation in large kinetic models},
    journal = {Bioinformatics},
    volume = {35},
    number = {5},
    pages = {830-838},
    year = {2018},
    month = {08},
    abstract = {Kinetic models contain unknown parameters that are estimated by optimizing the fit to experimental data. This task can be computationally challenging due to the presence of local optima and ill-conditioning. While a variety of optimization methods have been suggested to surmount these issues, it is difficult to choose the best one for a given problem a priori. A systematic comparison of parameter estimation methods for problems with tens to hundreds of optimization variables is currently missing, and smaller studies provided contradictory findings.We use a collection of benchmarks to evaluate the performance of two families of optimization methods: (i) multi-starts of deterministic local searches and (ii) stochastic global optimization metaheuristics; the latter may be combined with deterministic local searches, leading to hybrid methods. A fair comparison is ensured through a collaborative evaluation and a consideration of multiple performance metrics. We discuss possible evaluation criteria to assess the trade-off between computational efficiency and robustness. Our results show that, thanks to recent advances in the calculation of parametric sensitivities, a multi-start of gradient-based local methods is often a successful strategy, but a better performance can be obtained with a hybrid metaheuristic. The best performer combines a global scatter search metaheuristic with an interior point local method, provided with gradients estimated with adjoint-based sensitivities. We provide an implementation of this method to render it available to the scientific community.The code to reproduce the results is provided as Supplementary Material and is available at Zenodo https://doi.org/10.5281/zenodo.1304034.Supplementary data are available at Bioinformatics online.},
    issn = {1367-4803},
    doi = {10.1093/bioinformatics/bty736},
    url = {https://doi.org/10.1093/bioinformatics/bty736},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/35/5/830/48965908/bioinformatics\_35\_5\_830.pdf},
}


@article{RN44,
    author = {Paul, Richard D and Jadebeck, Johann F and Stratmann, Anton and Wiechert, Wolfgang and Nöh, Katharina},
    title = {hopsy — a methods marketplace for convex polytope sampling in Python},
    journal = {Bioinformatics},
    volume = {40},
    number = {7},
    pages = {btae430},
    year = {2024},
    month = {07},
    abstract = {Effective collaboration between developers of Bayesian inference methods and users is key to advance our quantitative understanding of biosystems. We here present hopsy, a versatile open-source platform designed to provide convenient access to powerful Markov chain Monte Carlo sampling algorithms tailored to models defined on convex polytopes (CP). Based on the high-performance C++ sampling library HOPS, hopsy inherits its strengths and extends its functionalities with the accessibility of the Python programming language. A versatile plugin-mechanism enables seamless integration with domain-specific models, providing method developers with a framework for testing, benchmarking, and distributing CP samplers to approach real-world inference tasks. We showcase hopsy by solving common and newly composed domain-specific sampling problems, highlighting important design choices. By likening hopsy to a marketplace, we emphasize its role in bringing together users and developers, where users get access to state-of-the-art methods, and developers contribute their own innovative solutions for challenging domain-specific inference problems.Sources, documentation and a continuously updated list of sampling algorithms are available at https://jugit.fz-juelich.de/IBG-1/ModSim/hopsy, with Linux, Windows and MacOS binaries at https://pypi.org/project/hopsy/.},
    issn = {1367-4811},
    doi = {10.1093/bioinformatics/btae430},
    url = {https://doi.org/10.1093/bioinformatics/btae430},
    eprint = {https://academic.oup.com/bioinformatics/article-pdf/40/7/btae430/58531207/btae430.pdf},
}

@article{RN45,
   author = {Abril-Pla, Oriol and Andreani, Virgile and Carroll, Colin and Dong, Larry and Fonnesbeck, Christopher J. and Kochurov, Maxim and Kumar, Ravin and Lao, Junpeng and Luhmann, Christian C. and Martin, Osvaldo A. and Osthege, Michael and Vieira, Ricardo and Wiecki, Thomas and Zinkov, Robert},
   doi = {10.7717/peerj-cs.1516},
   journal = {PeerJ Comput. Sci.},
   month = sep,
   title = {{PyMC: a modern, and comprehensive probabilistic programming framework in Python}},
   url = {https://peerj.com/articles/cs-1516},
   volume = {9},
   year = {2023}
}
